name: Production Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (example: v1.2.3)'
        required: true
        type: string

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: read
      deployments: write
    env:
      GHCR_REGISTRY: ghcr.io
      GHCR_ORG: vik-devops-lab
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.5.0
      - name: Verify backend image signature
        run: |
          echo "${{ secrets.COSIGN_PUB }}" | sed 's/\\n/\n/g' > cosign.pub
          cosign verify \
            --key cosign.pub \
            --insecure-ignore-tlog \
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG }}/health-api-backend:${{ github.event.inputs.version }}
      - name: Verify frontend image signature
        run: |
          echo "${{ secrets.COSIGN_PUB }}" | sed 's/\\n/\n/g' > cosign.pub
          cosign verify \
            --key cosign.pub \
            --insecure-ignore-tlog \
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG }}/health-api-frontend:${{ github.event.inputs.version }}
      - name: Pull backend image
        run: docker pull ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG }}/health-api-backend:${{ github.event.inputs.version }}
      - name: Pull frontend image
        run: docker pull ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG }}/health-api-frontend:${{ github.event.inputs.version }}
      - name: Run production deploy script
        env:
          VERSION: ${{ github.event.inputs.version }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
        run: |
          echo "$SSH_KEY" | tr -d '\r' > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST <<EOF
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
            export VERSION=${VERSION}
            cd ~/health-api/
            helmfile -f helm/helmfile.prod.gotmpl apply 
          EOF
